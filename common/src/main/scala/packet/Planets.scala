/**
 * Generated by Scrooge
 *   version: 4.5.0
 *   rev: 014664de600267b36809bbc85225e26aec286216
 *   built at: 20160203-205352
 */
package packet

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo,
  ThriftStructMetaData, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object Planets extends ThriftStructCodec3[Planets] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("Planets")
  val PlanetidField = new TField("planetid", TType.I16, 1)
  val PlanetidFieldManifest = implicitly[Manifest[Short]]
  val XField = new TField("x", TType.I16, 2)
  val XFieldManifest = implicitly[Manifest[Short]]
  val YField = new TField("y", TType.I16, 3)
  val YFieldManifest = implicitly[Manifest[Short]]
  val ZField = new TField("z", TType.I16, 4)
  val ZFieldManifest = implicitly[Manifest[Short]]
  val YSpdField = new TField("ySpd", TType.I16, 5)
  val YSpdFieldManifest = implicitly[Manifest[Short]]
  val XSpdField = new TField("xSpd", TType.I16, 6)
  val XSpdFieldManifest = implicitly[Manifest[Short]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      PlanetidField,
      false,
      false,
      PlanetidFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      XField,
      false,
      false,
      XFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      YField,
      false,
      false,
      YFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      ZField,
      false,
      false,
      ZFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      YSpdField,
      false,
      false,
      YSpdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      XSpdField,
      false,
      false,
      XSpdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Planets): Unit = {
  }

  def withoutPassthroughFields(original: Planets): Planets =
    new Immutable(
      planetid =
        {
          val field = original.planetid
          field
        },
      x =
        {
          val field = original.x
          field
        },
      y =
        {
          val field = original.y
          field
        },
      z =
        {
          val field = original.z
          field
        },
      ySpd =
        {
          val field = original.ySpd
          field
        },
      xSpd =
        {
          val field = original.xSpd
          field
        }
    )

  override def encode(_item: Planets, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

  private[this] def lazyDecode(_iprot: LazyTProtocol): Planets = {

    var planetid: Short = 0
    var x: Short = 0
    var y: Short = 0
    var z: Short = 0
    var ySpd: Short = 0
    var xSpd: Short = 0

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I16 =>
    
                planetid = readPlanetidValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I16
                throw new TProtocolException(
                  "Received wrong type for field 'planetid' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I16 =>
    
                x = readXValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I16
                throw new TProtocolException(
                  "Received wrong type for field 'x' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I16 =>
    
                y = readYValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I16
                throw new TProtocolException(
                  "Received wrong type for field 'y' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I16 =>
    
                z = readZValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I16
                throw new TProtocolException(
                  "Received wrong type for field 'z' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I16 =>
    
                ySpd = readYSpdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I16
                throw new TProtocolException(
                  "Received wrong type for field 'ySpd' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.I16 =>
    
                xSpd = readXSpdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I16
                throw new TProtocolException(
                  "Received wrong type for field 'xSpd' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      planetid,
      x,
      y,
      z,
      ySpd,
      xSpd,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): Planets =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[this] def eagerDecode(_iprot: TProtocol): Planets = {
    var planetid: Short = 0
    var x: Short = 0
    var y: Short = 0
    var z: Short = 0
    var ySpd: Short = 0
    var xSpd: Short = 0
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I16 =>
                planetid = readPlanetidValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I16
                throw new TProtocolException(
                  "Received wrong type for field 'planetid' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I16 =>
                x = readXValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I16
                throw new TProtocolException(
                  "Received wrong type for field 'x' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I16 =>
                y = readYValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I16
                throw new TProtocolException(
                  "Received wrong type for field 'y' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I16 =>
                z = readZValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I16
                throw new TProtocolException(
                  "Received wrong type for field 'z' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I16 =>
                ySpd = readYSpdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I16
                throw new TProtocolException(
                  "Received wrong type for field 'ySpd' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.I16 =>
                xSpd = readXSpdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I16
                throw new TProtocolException(
                  "Received wrong type for field 'xSpd' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      planetid,
      x,
      y,
      z,
      ySpd,
      xSpd,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    planetid: Short,
    x: Short,
    y: Short,
    z: Short,
    ySpd: Short,
    xSpd: Short
  ): Planets =
    new Immutable(
      planetid,
      x,
      y,
      z,
      ySpd,
      xSpd
    )

  def unapply(_item: Planets): _root_.scala.Option[scala.Product6[Short, Short, Short, Short, Short, Short]] = _root_.scala.Some(_item)


  @inline private def readPlanetidValue(_iprot: TProtocol): Short = {
    _iprot.readI16()
  }

  @inline private def writePlanetidField(planetid_item: Short, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(PlanetidField)
    writePlanetidValue(planetid_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writePlanetidValue(planetid_item: Short, _oprot: TProtocol): Unit = {
    _oprot.writeI16(planetid_item)
  }

  @inline private def readXValue(_iprot: TProtocol): Short = {
    _iprot.readI16()
  }

  @inline private def writeXField(x_item: Short, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(XField)
    writeXValue(x_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeXValue(x_item: Short, _oprot: TProtocol): Unit = {
    _oprot.writeI16(x_item)
  }

  @inline private def readYValue(_iprot: TProtocol): Short = {
    _iprot.readI16()
  }

  @inline private def writeYField(y_item: Short, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(YField)
    writeYValue(y_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeYValue(y_item: Short, _oprot: TProtocol): Unit = {
    _oprot.writeI16(y_item)
  }

  @inline private def readZValue(_iprot: TProtocol): Short = {
    _iprot.readI16()
  }

  @inline private def writeZField(z_item: Short, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ZField)
    writeZValue(z_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeZValue(z_item: Short, _oprot: TProtocol): Unit = {
    _oprot.writeI16(z_item)
  }

  @inline private def readYSpdValue(_iprot: TProtocol): Short = {
    _iprot.readI16()
  }

  @inline private def writeYSpdField(ySpd_item: Short, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(YSpdField)
    writeYSpdValue(ySpd_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeYSpdValue(ySpd_item: Short, _oprot: TProtocol): Unit = {
    _oprot.writeI16(ySpd_item)
  }

  @inline private def readXSpdValue(_iprot: TProtocol): Short = {
    _iprot.readI16()
  }

  @inline private def writeXSpdField(xSpd_item: Short, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(XSpdField)
    writeXSpdValue(xSpd_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeXSpdValue(xSpd_item: Short, _oprot: TProtocol): Unit = {
    _oprot.writeI16(xSpd_item)
  }


  object Immutable extends ThriftStructCodec3[Planets] {
    override def encode(_item: Planets, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): Planets = Planets.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[Planets] = Planets.metaData
  }

  /**
   * The default read-only implementation of Planets.  You typically should not need to
   * directly reference this class; instead, use the Planets.apply method to construct
   * new instances.
   */
  class Immutable(
      val planetid: Short,
      val x: Short,
      val y: Short,
      val z: Short,
      val ySpd: Short,
      val xSpd: Short,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends Planets {
    def this(
      planetid: Short,
      x: Short,
      y: Short,
      z: Short,
      ySpd: Short,
      xSpd: Short
    ) = this(
      planetid,
      x,
      y,
      z,
      ySpd,
      xSpd,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val planetid: Short,
      val x: Short,
      val y: Short,
      val z: Short,
      val ySpd: Short,
      val xSpd: Short,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends Planets {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }


    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the Planets trait with additional state or
   * behavior and implement the read-only methods from Planets using an underlying
   * instance.
   */
  trait Proxy extends Planets {
    protected def _underlying_Planets: Planets
    override def planetid: Short = _underlying_Planets.planetid
    override def x: Short = _underlying_Planets.x
    override def y: Short = _underlying_Planets.y
    override def z: Short = _underlying_Planets.z
    override def ySpd: Short = _underlying_Planets.ySpd
    override def xSpd: Short = _underlying_Planets.xSpd
    override def _passthroughFields = _underlying_Planets._passthroughFields
  }
}

trait Planets
  extends ThriftStruct
  with scala.Product6[Short, Short, Short, Short, Short, Short]
  with java.io.Serializable
{
  import Planets._

  def planetid: Short
  def x: Short
  def y: Short
  def z: Short
  def ySpd: Short
  def xSpd: Short

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = planetid
  def _2 = x
  def _3 = y
  def _4 = z
  def _5 = ySpd
  def _6 = xSpd


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (true) {
                writePlanetidValue(planetid, _oprot)
                _root_.scala.Some(Planets.PlanetidField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (true) {
                writeXValue(x, _oprot)
                _root_.scala.Some(Planets.XField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (true) {
                writeYValue(y, _oprot)
                _root_.scala.Some(Planets.YField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (true) {
                writeZValue(z, _oprot)
                _root_.scala.Some(Planets.ZField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (true) {
                writeYSpdValue(ySpd, _oprot)
                _root_.scala.Some(Planets.YSpdField)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (true) {
                writeXSpdValue(xSpd, _oprot)
                _root_.scala.Some(Planets.XSpdField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
            _root_.scala.Some(TFieldBlob(_field, _data))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): Planets = {
    var planetid: Short = this.planetid
    var x: Short = this.x
    var y: Short = this.y
    var z: Short = this.z
    var ySpd: Short = this.ySpd
    var xSpd: Short = this.xSpd
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        planetid = readPlanetidValue(_blob.read)
      case 2 =>
        x = readXValue(_blob.read)
      case 3 =>
        y = readYValue(_blob.read)
      case 4 =>
        z = readZValue(_blob.read)
      case 5 =>
        ySpd = readYSpdValue(_blob.read)
      case 6 =>
        xSpd = readXSpdValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      planetid,
      x,
      y,
      z,
      ySpd,
      xSpd,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): Planets = {
    var planetid: Short = this.planetid
    var x: Short = this.x
    var y: Short = this.y
    var z: Short = this.z
    var ySpd: Short = this.ySpd
    var xSpd: Short = this.xSpd

    _fieldId match {
      case 1 =>
        planetid = 0
      case 2 =>
        x = 0
      case 3 =>
        y = 0
      case 4 =>
        z = 0
      case 5 =>
        ySpd = 0
      case 6 =>
        xSpd = 0
      case _ =>
    }
    new Immutable(
      planetid,
      x,
      y,
      z,
      ySpd,
      xSpd,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetPlanetid: Planets = unsetField(1)

  def unsetX: Planets = unsetField(2)

  def unsetY: Planets = unsetField(3)

  def unsetZ: Planets = unsetField(4)

  def unsetYSpd: Planets = unsetField(5)

  def unsetXSpd: Planets = unsetField(6)


  override def write(_oprot: TProtocol): Unit = {
    Planets.validate(this)
    _oprot.writeStructBegin(Struct)
    writePlanetidField(planetid, _oprot)
    writeXField(x, _oprot)
    writeYField(y, _oprot)
    writeZField(z, _oprot)
    writeYSpdField(ySpd, _oprot)
    writeXSpdField(xSpd, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    planetid: Short = this.planetid,
    x: Short = this.x,
    y: Short = this.y,
    z: Short = this.z,
    ySpd: Short = this.ySpd,
    xSpd: Short = this.xSpd,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): Planets =
    new Immutable(
      planetid,
      x,
      y,
      z,
      ySpd,
      xSpd,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Planets]

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[Planets]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 6

  override def productElement(n: Int): Any = n match {
    case 0 => this.planetid
    case 1 => this.x
    case 2 => this.y
    case 3 => this.z
    case 4 => this.ySpd
    case 5 => this.xSpd
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Planets"
}